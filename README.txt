
# Made on a Mac and a Ti-89 Titanium

# ml_functions

generate_rand_Table1( $PATH_TO_FILE )		# line 15
import_Table_1( $PATH_TO_FILE )			# line 17
plotTABLE1( $TABLE1, $x, $y, $where )		# line 20
quad_info0( $tbtw0s, $Dbtw0s, $yoffs )		# line 33
quad_info1( $tbtw0s, $b, $yoffs )		# line 34
tVfpos_lookup( $tbl, $position )		# line 41
Tbl1JDTtoNorm( $ColSepTimStr )			# line 50
jl2normaldate( $jl_dates, $dateFormat )		# line 55
leapyear( $year)                                # line 61



generate_rand_Table1( $PATH_TO_FILE )     # PATH_TO_FILE = String Var Path to File for writing

import_Table_1( $PATH_TO_FILE )           # PATH_TO_FILE = String Var Path to File for import

# Used by import_Table_1.m
plotTABLE1( $TABLE1, $x, $y, $where )     # TABLE1       = Table Var for where x and y data
                                                           will come from

                                          # x            = String var to assign a TABLE1 column
                                                           to an axis.  It also specfies absolute
                                                           or relative position or time

                                          # y            =      <<< Ditto >>>

                                          # where        = Where to plot to. default is:
                                                            figure(1)

# Used by generate_rand_Table1.m, but will probably be put inside it later
quad_info0( $tbtw0s, $Dbtw0s, $yoffs )	  # tbtw0s	 = time between Zeros
quad_info1( $tbtw0s, $b, $yoffs )         # Dbtw0s	 = Distance between Zeros
                                          # yoffs	 = y-offset
                                          # b		 = specified quadratic b-term or initial acceleration


# Used by generate_rand_Table1.m, for (time & Velocity from position, through linear interpolation between
# calculated data points.
tVfpos_lookup( $tbl, $position)           # tbl		 = lookup table containing [int t, double Position, double Velocity]
					 			(if generated by the random data generator)
                                          # position	 = position


#########################################
# No expensive Aerospace Toolboox fixes #
#########################################
# Used by the main import and generator functions
Tbl1JDTtoNorm( $ColSepTimStr )		  # ColSepTimStr = Column Seperated Time String in the format:
								'yyyy:jjj:hh:mm:ss:ffffff'

# Used by Tbl1JDTtoNorm.m
# Source Downloaded from:  http://freesourcecode.net/matlabprojects/64631/convert-julian-date-to-normal-date-in-matlab#.VoeWbZMrJHQ
jl2normaldate( $jl_dates, $dateFormat )   # jl_dates	 = juliandate string in the format:
								'yyyyjjj'
					  # dateFormat	 = date format string.  Default is:
							       'dd-mmm-yyyy HH:MM:SS'

# Used by jl2normaldate.m
leapyear( $year)		 	  # year	 = specified year






